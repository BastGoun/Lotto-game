/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jeuloto;
import java.awt.*;
import java.util.ArrayList;//import des différentes bibliotèques de java
import javax.swing.*;
/**
 *
 * @author bast
 */
public class JeuLoto extends javax.swing.JFrame {
    String ChaineTirage; //permetant d'avoir un historique de tirage modifiable à travers les différentes méthode
    private ArrayList<Joueur>lsj; //ArrayList permettant de remplacer LesJoueurs
    private ArrayList<Joueur> Gagnants = new ArrayList();//ArrayList des gagnants
    private int nbGagnant = 0;//indice du nombre de gagnants
    private LesLots lsl = new LesLots();//classe ayant pour attribut une ArrayList de type Lots
    
    private int option = 0; //entier qui va recevoir la valeur de l'option choisie (1,2 ou 3)
    private int nbCol; //entier qui va recevoir le nombre de colonne choisit par les joueurs pour les cartes
    private int nbNum; //entier qui va recevoir le nombre de numéro choisit par les joueurs pour les cartes
    private int nbLig = 3;//Nombre de lignes
    private int MAX = 90;//Nombre de numéros tirés MAXIMUM lors des tirages
    private int boules[];//tableau des numéros tirés
    /**
     * Creates new form JFrameJeuLoto
     */
    public JeuLoto() {
        initComponents(); //initialisation des composants de la JFrame
        this.lsj=new ArrayList<Joueur>(); //initialistaions de la ArrayLists des joueurs
        //initJoueurs();//initialisation des joueurs par défaut
        this.boules = new int[MAX];
        initBoules();//initialise le tirage des boules à 0
        setEnabled();//permet de ne pas pouvoir intéragir avec certains boutons
    }
    
    public JeuLoto(ArrayList<Joueur> lsj){
        initComponents(); //initialisation des composants de la JFrame
        this.lsj=lsj; //initialistaions de la ArrayLists des joueurs
        setEnabled();//permet de ne pas pouvoir intéragir avec certains boutons
    }
    
    public JeuLoto(ArrayList<Joueur> lsj,LesLots lsl, int nbLig,int nbCol, int nbNum){//constructeur avec plusieurs parametres
        this.lsl = lsl;//attribut lsl récupère la ArrayList lsj
        this.nbLig = nbLig;//nombre de ligne assigné à nbLig
        this.nbCol = nbCol;//nombre de colonne assigné à nbCol
        this.nbNum = nbNum;//nombre de numéros assignés à nbNum
        initComponents(); //initialisation des composants de la JFrame
        this.lsj=lsj; //initialistaions de la ArrayLists des joueurs
        setEnabled();//permet de ne pas pouvoir intéragir avec certains boutons
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PJoueur = new javax.swing.JPanel();
        Joueur1 = new javax.swing.JButton();
        Joueur2 = new javax.swing.JButton();
        Joueur3 = new javax.swing.JButton();
        Joueur4 = new javax.swing.JButton();
        PAffichage = new javax.swing.JPanel();
        LotChoisit = new javax.swing.JLabel();
        PSousAffichage = new javax.swing.JPanel();
        Aff1 = new javax.swing.JPanel();
        PanHistorique = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Edition = new javax.swing.JTextArea();
        PanVisu = new javax.swing.JPanel();
        Pnull = new javax.swing.JPanel();
        Aff2 = new javax.swing.JPanel();
        Option = new javax.swing.JLabel();
        Aff2_1 = new javax.swing.JPanel();
        Tirage = new javax.swing.JButton();
        PNumero = new javax.swing.JPanel();
        Numero = new javax.swing.JLabel();
        Arreter = new javax.swing.JButton();
        PCentre = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        PHaut = new javax.swing.JPanel();
        Titre = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        Ajout = new javax.swing.JMenu();
        AjoutJoueur = new javax.swing.JMenuItem();
        Lot = new javax.swing.JMenuItem();
        VisuLot = new javax.swing.JMenuItem();
        Action = new javax.swing.JMenu();
        Optionjeu = new javax.swing.JMenuItem();
        DemarrerJeu = new javax.swing.JMenuItem();
        AcheterCarte = new javax.swing.JMenuItem();
        Continuer = new javax.swing.JMenuItem();
        Recommencer = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PJoueur.setLayout(new java.awt.GridLayout(4, 1));

        Joueur1.setText("Joueur1");
        PJoueur.add(Joueur1);

        Joueur2.setText("Joueur2");
        PJoueur.add(Joueur2);

        Joueur3.setText("Joueur3");
        PJoueur.add(Joueur3);

        Joueur4.setText("Joueur4");
        PJoueur.add(Joueur4);

        getContentPane().add(PJoueur, java.awt.BorderLayout.LINE_END);

        PAffichage.setLayout(new java.awt.BorderLayout());

        LotChoisit.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        LotChoisit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LotChoisit.setText("Cadeau : ");
        PAffichage.add(LotChoisit, java.awt.BorderLayout.PAGE_START);

        PSousAffichage.setLayout(new java.awt.GridLayout(1, 2));

        Aff1.setLayout(new java.awt.GridLayout(1, 2));

        PanHistorique.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Historique du tirage des boules");
        PanHistorique.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        Edition.setEditable(false);
        Edition.setColumns(20);
        Edition.setRows(5);
        jScrollPane1.setViewportView(Edition);

        PanHistorique.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        Aff1.add(PanHistorique);

        PanVisu.setLayout(new java.awt.BorderLayout());
        PanVisu.add(Pnull, java.awt.BorderLayout.PAGE_START);

        Aff1.add(PanVisu);

        PSousAffichage.add(Aff1);

        Aff2.setLayout(new java.awt.BorderLayout());

        Option.setText("Option choisie :");
        Aff2.add(Option, java.awt.BorderLayout.PAGE_START);

        Aff2_1.setLayout(new java.awt.GridLayout(1, 3));

        Tirage.setText("Tirage");
        Tirage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TirageActionPerformed(evt);
            }
        });
        Aff2_1.add(Tirage);

        PNumero.setLayout(new java.awt.BorderLayout());

        Numero.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        Numero.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PNumero.add(Numero, java.awt.BorderLayout.CENTER);

        Aff2_1.add(PNumero);

        Arreter.setText("Arreter");
        Arreter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArreterActionPerformed(evt);
            }
        });
        Aff2_1.add(Arreter);

        Aff2.add(Aff2_1, java.awt.BorderLayout.CENTER);

        PSousAffichage.add(Aff2);

        PAffichage.add(PSousAffichage, java.awt.BorderLayout.CENTER);

        getContentPane().add(PAffichage, java.awt.BorderLayout.PAGE_END);

        PCentre.setLayout(new java.awt.GridLayout(4, 2));
        PCentre.add(jPanel1);
        PCentre.add(jPanel2);
        PCentre.add(jPanel3);
        PCentre.add(jPanel4);
        PCentre.add(jPanel5);
        PCentre.add(jPanel6);
        PCentre.add(jPanel7);
        PCentre.add(jPanel8);

        getContentPane().add(PCentre, java.awt.BorderLayout.CENTER);

        Titre.setFont(new java.awt.Font("Milestone Free Version", 0, 18)); // NOI18N
        Titre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Titre.setText("Voici les cartes dont vous disposez");
        PHaut.add(Titre);

        getContentPane().add(PHaut, java.awt.BorderLayout.PAGE_START);

        Ajout.setText("Ajout");

        AjoutJoueur.setText("Joueur");
        AjoutJoueur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AjoutJoueurActionPerformed(evt);
            }
        });
        Ajout.add(AjoutJoueur);

        Lot.setText("Lot");
        Lot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LotActionPerformed(evt);
            }
        });
        Ajout.add(Lot);

        VisuLot.setText("Visualisation des Lots");
        VisuLot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VisuLotActionPerformed(evt);
            }
        });
        Ajout.add(VisuLot);

        jMenuBar1.add(Ajout);

        Action.setText("Action");

        Optionjeu.setText("Option Jeu");
        Optionjeu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptionjeuActionPerformed(evt);
            }
        });
        Action.add(Optionjeu);

        DemarrerJeu.setText("Démarrer Jeu");
        DemarrerJeu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DemarrerJeuActionPerformed(evt);
            }
        });
        Action.add(DemarrerJeu);

        AcheterCarte.setText("Acheter cartes");
        AcheterCarte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AcheterCarteActionPerformed(evt);
            }
        });
        Action.add(AcheterCarte);

        Continuer.setText("Continuer");
        Continuer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContinuerActionPerformed(evt);
            }
        });
        Action.add(Continuer);

        Recommencer.setText("Recommencer");
        Recommencer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecommencerActionPerformed(evt);
            }
        });
        Action.add(Recommencer);

        jMenuBar1.add(Action);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TirageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TirageActionPerformed
        Tirage(); //appelle de la méthode pour lancer le tirage
        DemarrerJeu.setEnabled(false);//enleve le choix d'appuyer sur le bouton "demarrer jeu" 
        AcheterCarte.setEnabled(false);//empeche les joueurs d'acheter des cartes si les tirages ont déja commencers
    }//GEN-LAST:event_TirageActionPerformed

    private void LotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LotActionPerformed
        AjoutLotDlg lot = new AjoutLotDlg(this,true);//instanciation de AjoutLotDlg
        lot.setLocation(300,100);//on positionne la boite de dialogue
        lot.setSize(500,300);//on redimenssionne la boite de dialogue
        lot.setVisible(true);//on rend la boite de dialogue visible
        if(lot.getOk()==true){//si la boite de dialogue est fermé
            Lots lelot = lot.getLot();//instanciation de Lots
            this.lsl.retireLot();//on retire l'intégralité des lots de lsl
            lsl.ajouteLots(lelot);//on ajoute le nouveau lot rentré auparavant
            LotChoisit.setText("Cadeau : "+lelot.getDescriptif());//on place le cadeau avec le descriptif dans LotChoisit
            PanneauImage pan = new PanneauImage();//instanciation de PanneauImage
            pan.setImage(lot.getImage());//on affecte au panneau la photo du lot que nous récupérons
            PanVisu.add(pan);//on ajoute pan (PanneauImage) dans le panneau PanVisu
            Optionjeu.setEnabled(true);//on rend la possibilité alors de rentré les options du jeu
        }
    }//GEN-LAST:event_LotActionPerformed

    private void RecommencerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecommencerActionPerformed
        JeuLoto jeu = new JeuLoto(this.lsj);//nouvelle instance de jeu créer mais on garde les joueurs déjà présents
        jeu.initBoulesRecommencer();//on initialise la liste des boules dans ce nouveau jeu
        this.setVisible(false);//on l'ancienne boite de dialogue
        for(int i=0;i<this.lsj.size();i++){//pour l'ensemble des joueurs
            this.lsj.get(i).setSolde(20);//on réaffecte à chaque joueur un solde de 20
            this.lsj.get(i).getMesCartes().retireCarte();//on leur supprime leurs cartes
            this.lsj.get(i).getMesLots().retireLot();//on supprime l'intégralité des lots des joueurs
        }
        jeu.ListeJoueur(this.lsj);//on affecte à la nouvelle instance de jeuloto la liste des joueurs
        jeu.setSize(900,450);//on affecte une nouvelle taille à jeu
        jeu.setVisible(true);//on l'a rend visible
        this.dispose();////on enleve l'ancienne boite de dialogue
    }//GEN-LAST:event_RecommencerActionPerformed

    private void ArreterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArreterActionPerformed
        Arreter();//on appel la méthode Arreter qui va mettre fin à la partie 
    }//GEN-LAST:event_ArreterActionPerformed

    private void DemarrerJeuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DemarrerJeuActionPerformed
        Tirage.setEnabled(true);//rend le tirage impossible
        AcheterCarte.setEnabled(false);//rend l'achat de Carte impossible
        DemarrerJeu.setEnabled(false);//impossible de démarer le jeu une deuxieme fois
        AjoutJoueur.setEnabled(false);//impossible de pouvoir rajouter des joueurs
        Lot.setEnabled(false);//impossible de pouvoir cahnger le lot
        VisuLot.setEnabled(false);//impossible de voir les lots disponibles
    }//GEN-LAST:event_DemarrerJeuActionPerformed
    
    private void AjoutJoueurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AjoutJoueurActionPerformed
        if(this.lsj.size()>3){ //si le nombre de joueurs dépasse 4,
            ErrorPlayerDlg erreur = new ErrorPlayerDlg(this,true);//affichage d'une boite de dialogue de type "ErrorPlayerDlg"(boite personnalisée)
            erreur.setSize(500,100);//permet de fixé la taille de la boite de dialogue
            erreur.setLocation(300,100);//emplacement de la boite de dialogue
            erreur.setVisible(true); //méthode pour rendre la boite de dialogue visible
        }
        else{
            AjoutJoueurDlg diag = new AjoutJoueurDlg(this,true); //instanciation d'une boite de dialogue diag de type "AjoutJoueurDlg"
            diag.setVisible(true); //méthode pour rendre visible diag
            if(diag.getOk()==true){ //si l'attribut "ok" de la boite de dialogue est à "true"(transfert de donnée de AjoutJoueurDlg->JeuLoto)
                Joueur j = diag.getJoueur();//récupération du joueur créer pa la boite de dialogue dans un nouveau joueur j
                JButton bout = (JButton)PJoueur.getComponent(this.lsj.size());//récupération du bouton où le joueur à appuyer (où l'event à eu lieu) et nommé bout
                bout.setBackground(j.getCouleur());// ajout d'un fond pour le bouton avec la couleur récupérer sur le joueur
                bout.setText(j.getPseudo());//ajout du texte sur le bouton avec la récupération du pseudo sur le joueur j
                bout.addActionListener(new java.awt.event.ActionListener(){//ajout d'un écouteur sur le bouton bout
                public void actionPerformed(java.awt.event.ActionEvent evt){//ajout d'un event sur le bouton de type actionPerformed
                    boutonActionPerformed(evt); //appel de la méthode boutonActionPerformed lors d'une clique sur le bouton: Transfert de données
                }
            });
                lsj.add(j); //ajout du joueur j à la liste lsj.
            }
        }
        System.out.println("Nombre de joueurs :"+this.lsj.size()); //affichage test pour voir le nombre de joueur présent dans la console
    }//GEN-LAST:event_AjoutJoueurActionPerformed

    private void OptionjeuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptionjeuActionPerformed
        OptionDlg option = new OptionDlg(this,true,false,this.nbCol,this.nbNum); //instanciation d'un élément de type OptionDlg nommé option
        option.setLocation(300,100);//méthode pour placer la boite de dialogue
        option.setVisible(true);//méthode pour rendre visible option
        if(option.getOk()==true){//si l'attribut de type boolean est à true pour la boite de dialogue
            this.option = option.getChoix(); //l'attribut option récupère l'information du choix de option avec la méthode "getChoix()" (transfert de données de option->JeuLoto)
            this.nbCol = option.getNbCol();//l'attribut nbCol récupère l'information du nombre de colonne avec la méthode "getNbCol()" (transfert de données de option->JeuLoto)
            this.nbNum = option.getNbNum();//l'attribut nbNum récupère l'information du nombre de numéros avec la méthode "getNbNum()" (transfert de données de option->JeuLoto)
            if(this.option == 1){ //si l'attribut option est à '1' (possibilité de faire un switch-case)
                Option.setText("Option choisie : Quine - Une ligne complète");//affichage d'un message dans Option
            }
            else if(this.option == 2){//si l'attribut option est à '2'
                Option.setText("Option choisie : Double Quine - Deux lignes complètes");//affichage d'un message dans Option
            }
            else if(this.option == 3){//si l'attribut option est à '3'
                Option.setText("Option choisie : Carton plein - Trois lignes complètes");//affichage d'un message dans Option
            }
            AcheterCarte.setEnabled(true);
            Continuer.setEnabled(true);
        }
    }//GEN-LAST:event_OptionjeuActionPerformed

    private void AcheterCarteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AcheterCarteActionPerformed
        if(this.lsj.size()==0){//si aucun joueur n'est rentré, impossible d'acheter des cartes
            JOptionPane option = new JOptionPane();
            option.showMessageDialog(this, "Impossible d'acheter des cartes si aucun joueur n'est rentré","Jeu Loto",JOptionPane.WARNING_MESSAGE);
        }
        else{
            AchatCarteDlg achat = new AchatCarteDlg(this,true,this.lsj,this.nbLig,this.nbCol,this.nbNum);
            //sinon instanciation d'une nouvelle boite de dialogue avec en parametre ce qui est nécessaire à l'affichage des joueurs et à l'affichage d'une carte
            achat.setLocation(300,100);//on fixe la position de la boite de dialogue
            achat.setVisible(true);//on la rend visible
                if(achat.getAchat()==true){//si au moins une carte est acheté
                    Optionjeu.setEnabled(false);//on rend impossible un changement d'option de jeu
                    DemarrerJeu.setEnabled(true);//on rend la possibilté de commencer la partie
                }
                afficheCartes();//on affiche les cartes dans le panneau principal
        }
        revalidate();//on rafraichit la boite de dialogue pour l'affichage des cartes
    }//GEN-LAST:event_AcheterCarteActionPerformed

    private void ContinuerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContinuerActionPerformed
        if(this.option<=2){//si l'option choisit est 1 ou 2
            for(int i=0; i<this.lsj.size();i++){
                this.lsj.get(i).getMesCartes().retireCarte();//on retire les cartes des joueurs
            }
            JeuLoto jeu = new JeuLoto(this.lsj,this.lsl, this.nbLig,this.nbCol,this.nbNum);//nouvelle instance de JeuLoto
            jeu.setContinuer(this.option+1,this.nbCol,this.nbNum,this.nbLig);//on appel la méthode setContinuer qui permet de récupérer les parametres de l'ancienne option mais sans les cartes
            jeu.ListeJoueur(this.lsj);//on affecte la liste de joueur
            jeu.initBoules();//on initialise la liste de boules
            this.setVisible(false);//on ferme l'instance de jeu en cours
            jeu.setSize(900,450);//on redimensionne jeu
            jeu.setVisible(true);//on rend visible l'instance de jeu
            this.dispose();//on enleve l'ancienne instance de JeuLoto
        }
    }//GEN-LAST:event_ContinuerActionPerformed

    private void VisuLotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VisuLotActionPerformed
        VisuLotDlg visu = new VisuLotDlg(this,true);
        visu.setSize(500,250);
        visu.setVisible(true);
    }//GEN-LAST:event_VisuLotActionPerformed
    
    private void boutonActionPerformed(java.awt.event.ActionEvent evt){//méthode pour déclarer un event sur un bouton
        JButton bt = (JButton)evt.getSource();//récupération du bouton où le joueur  à appuyer
        String nom = bt.getText();//récupération du pseudo du joueur qui est sur le bouton dans une chaine de caractères nommé nom
        for(int i=0;i<this.lsj.size();i++){//boucle for pour parcourir l'ensemble des joueurs de la liste lsj
            if(nom.equals(this.lsj.get(i).getPseudo())){//comparaison de nom avec les pseudos des joueurs avec récupération de l'indice du joueur puis récupération du pseudo
                Joueur j = this.lsj.get(i);//si la comparaison est "bonne", un nouveau joueur "j" récupère avec la méthode getJoueur() le joueur affilier à l'index du joueur trouvé
                VisuJoueurDlg diag = new VisuJoueurDlg(this,true,j); //instanciation de diag du type VisuJoueurDlg avec en paramètre le joueur trouvé qui est renvoyé à j
                diag.setVisible(true);//diag est rendue visible
            }
        }
    }
    
    private String getTexte(){//méthode pour la récupération du texte de Edition
        return Edition.getText();
    }
    
    public void setLot(String lot){//méthode pour affecter un lot à LotChoisit
        LotChoisit.setText(lot);
    }
    
    
    public void Tirage(){//déclaration de la méthode Trage
        int tirage;//entier nommé tirage
        do{//do while pour permettre de boucler tant que une boule à déja été tirée
            tirage = (int)(Math.random()*(MAX-1))+1;//choix d'un nombre aléatoire entre 1 et 90
        }while(this.boules[tirage-1]==1);//on sort de la condition si ce numéro n'a pas été tiré
        boules[tirage-1]=1;//on met dans le tableau la valeur 1 pour ne plus pouvoir la tiré
        
        //Partie Edition
        this.ChaineTirage=Integer.toString(tirage); //tirage passe d'un entier à une chaine de caratère et est renvoyé à ChaineTirage
            if(this.ChaineTirage.length()<2){//si Chaine de tirage est un chiffre, on complète avec " " pour un meilleur visuel
                this.ChaineTirage = " "+this.ChaineTirage;//ajout de l'espace espace
            }
        Numero.setText(this.ChaineTirage);//Numero récupère la valeur de Chaine de tirage est lui est affecté
        char space = '•';//une variable de type caractere est créer avec comme caractere "•"
        String res="";//ajout d'une variable initialiser à "" et nommé res
        if(getTexte().equals(""))//Si Edition ne possède encore aucune valeur
            res = getTexte()+this.ChaineTirage;//affecation directe de Chiane de caracère à res
        else//sinon
            res = getTexte()+space+this.ChaineTirage;//ajout du caractère de "space" avant ChaineTirage
        this.ChaineTirage="";//ChaineTirage redevient vide
        Edition.setText(res);//Affectation de res à Edition
        //Fin Partie Edition
        
        afficheCartes();
        for(int i=0;i<this.lsj.size();i++){//boucle for pour parcourir tout les joueurs
            for(int j=0;j<this.lsj.get(i).getLesCartes();j++){//boucle for pour parcourir les cartes de chaque joueur
                if(this.lsj.get(i).getMesCartes().getCarte(j).estDans(tirage)){//si l'un des joueurs possède une carte qui possède cette valeur
                        if(this.lsj.get(i).getMesCartes().getCarte(j).placePion(tirage)==true){//si le pion possède un jeton sur la case
                            afficheCartes();
                            if(this.lsj.get(i).getMesCartes().getCarte(j).cartonGagnant(this.option)==true){//recherche des joueurs possédants une valeur du tirage dans leurs cartes
                                Joueur gagnant = this.lsj.get(i);//crétaion d'un joueur gagnant
                                this.Gagnants.add(gagnant);//ajout de ce joueur dans la ArrayList des Gagnants
                                Edition.append("\n - Le Joueur "+Gagnants.get(this.nbGagnant).getPseudo()+" a réalisé ");//affichage du joueur qui à réalisé un exploit
                                this.nbGagnant++;
                                switch(this.option){//switch en fonction de l'option choisit
                                    case 1:{
                                        Edition.append("un Quine ! - ");break;//message dans l'historique des tirages avec l'option 1
                                    }
                                    case 2:{
                                        Edition.append("un double Quine ! - ");break;//message dans l'historique des tirages avec l'option 2
                                    }
                                    case 3:{
                                        Edition.append("un Carton Plein ! - ");break;//message dans l'historique des tirages avec l'option 3
                                    }
                                }
                            if(Gagnants.size()==1){//si il y a qu'un seul gagnant
                                Gagnants.get(0).setLot(this.lsl.getLots(0));
                                Edition.append("\n - Le Gagnant du lot \""+this.lsl.getLots(0).getDescriptif()+"\" est "+Gagnants.get(0).getPseudo()+"! - \n - Fin du Jeu - ");//Historique des tirage se voit ajouter ce message
                                Tirage.setEnabled(false);//impossible de continuer de tiré une carte
                            }
                            else if(Gagnants.size()>1){//si il y a plusieurs gagnants
                                int rand = (int)(Math.random()*this.Gagnants.size());//choix aléatoire d'un nombre parmit l'index des gagnants
                                Joueur LEgagnant = this.Gagnants.get(rand);//récupération du joueur avec l'index choisit auparavant
                                LEgagnant.setLot(this.lsl.getLots(0));
                                Edition.append("\n - Après délibérations, le jury s'octroie de donner le lot \""+this.lsl.getLots(0).getDescriptif()+"\" à "+LEgagnant.getPseudo()+" - \n - Fin du Jeu - ");//Historique des tirage se voit ajouter ce message
                                Tirage.setEnabled(false);//impossible de continuer de tiré une carte
                            }
                        }
                    }
                }
            }
        }
    }
    
    public void initBoulesRecommencer(){//permet lorsqu'une partie est recommencer d'initialiser les boules de tirages
        this.boules = new int[MAX];
        initBoules();
    }
    
    public void setEnabled(){//permet lors de l'ouverture d'une instance de JeuLoto, d'enlever l'accesibilté aux boutons
        Optionjeu.setEnabled(false);
        AcheterCarte.setEnabled(false);
        Tirage.setEnabled(false);
        DemarrerJeu.setEnabled(false);
        Continuer.setEnabled(false);
        DemarrerJeu.setEnabled(false);
    }
    
    public void Arreter(){//lorsqu'une partie est arretée, on affiche un message mais on enelve toute possibilté de continuer la partie
        Edition.append("\n - Fin de la partie - ");
        Optionjeu.setEnabled(false);
        AcheterCarte.setEnabled(false);
        Tirage.setEnabled(false);
        DemarrerJeu.setEnabled(false);
        Continuer.setEnabled(false);
        DemarrerJeu.setEnabled(false);
        AjoutJoueur.setEnabled(false);
        Lot.setEnabled(false);
    }
    
    public void ListeJoueur(ArrayList<Joueur> lsj){//méthode qui va permettre d'initialiser les boutons et les joueurs
        for(int i=0;i<lsj.size();i++){
            this.lsj= lsj;
            JButton bout = (JButton)PJoueur.getComponent(i);//récupération du bouton où le joueur à appuyer (où l'event à eu lieu) et nommé bout
            bout.setBackground(lsj.get(i).getCouleur());// ajout d'un fond pour le bouton avec la couleur récupérer sur le joueur
            bout.setText(lsj.get(i).getPseudo());//ajout du texte sur le bouton avec la récupération du pseudo sur le joueur j
            bout.addActionListener(new java.awt.event.ActionListener(){//ajout d'un écouteur sur le bouton bout
            public void actionPerformed(java.awt.event.ActionEvent evt){//ajout d'un event sur le bouton de type actionPerformed
                boutonActionPerformed(evt); //appel de la méthode boutonActionPerformed lors d'une clique sur le bouton: Transfert de données
                } 
            });
        }
    }
    
    public void setContinuer(int option, int nbCol, int nbNum, int nbLig){//permet de continuer une partie
        this.boules = new int[MAX];
        this.nbCol = nbCol;
        this.nbLig = nbLig;
        this.nbNum = nbNum;
        Optionjeu.setEnabled(false);
        DemarrerJeu.setEnabled(false);
        Lot.setEnabled(true);//possibilté de rajouter un lot
        VisuLot.setEnabled(true);//possibilité de voir les lots disponibles
        AcheterCarte.setEnabled(true);//possibilté d'acheter des cartes
        Tirage.setEnabled(false);//impossibilité de tirer une boule
        //affectation classique des parametres pour la prochaine option de jeu
        //on ne peut pas changer les options de jeu
        //on enleve certain bouton pour avoir un 'chemin' pour les joueurs
        
        this.option = option;//en fonction de l'option choisit, on affecte un message concernant l'option choisit
        if(option==2){
            Option.setText("Option choisie : Double Quine - Deux lignes complètes");
            Continuer.setEnabled(true);
        }
        if(option==3){
            Option.setText("Option choisie : Carton plein - Trois lignes complètes");
            Continuer.setEnabled(false);
        }
    }
    
    public void afficheCartes(){//affichage des cartes dans le panneau centre
        int cpt = 0;//compteur cpt initialisé à 0
        for(int i=0;i<this.lsj.size();i++){//on parcours l'ensemble des joueurs
            int nbCartes = this.lsj.get(i).getMesCartes().getTaille();//nbCartes récupère la taille de la liste des lots du joueur(récupère donc le nombre de cartes du joueur)
            switch(nbCartes){//différentes options
                case 0:{//si le joueur ne possède pas de cartes
                    cpt=cpt+2;//on incrémente de 2 pour pouvoir afficher les cartes du joueur suivant
                    break;
                }
                case 1:{//si le joueur possède une carte
                    JPanel panneau = (JPanel)PCentre.getComponent(cpt);//on récupère le panneau libre dans la ligne du joueur (cpt va permettre de récupérer cette case)
                    Color couleur = this.lsj.get(i).getCouleur();//on récupère la couleur du joueur
                    CarteLoto carte = this.lsj.get(i).getMesCartes().getCarte(0);//on crée une nouvelle instnace de CarteLoto qui est la récuépartion de la premiere carte du joueur
                    carte.dessineCarte(panneau, couleur);//on dessine dans le panneau principal la Carte avec en parametre le panneau et la couleur du joueur
                    cpt=cpt+2;//on incrémente de 2 pour pouvoir passer à la ligne du joueur suivant
                    break;
                }
                case 2 :{//si le joueur possède deux cartes
                    JPanel panneau = (JPanel)PCentre.getComponent(cpt);//on récupère le panneau libre dans la ligne du joueur (cpt va permettre de récupérer cette case)
                    Color couleur = this.lsj.get(i).getCouleur();//on récupère la couleur du joueur
                    cpt=cpt+1;//on incrémente de 1 pour passer au panneau du joueur suivant
                    CarteLoto carte = this.lsj.get(i).getMesCartes().getCarte(0);//on crée une nouvelle instnace de CarteLoto qui est la récuépartion de la premiere carte du joueur
                    carte.dessineCarte(panneau, couleur);//on dessine dans le panneau principal la Carte avec en parametre le panneau et la couleur du joueur
                    JPanel panneaubis = (JPanel)PCentre.getComponent(cpt);//on récupère le panneau libre dans la ligne du joueur (cpt va permettre de récupérer cette case)
                    CarteLoto carte2 = this.lsj.get(i).getMesCartes().getCarte(1);//on crée une nouvelle instnace de CarteLoto qui est la récuépartion de la deuxieme carte du joueur
                    carte2.dessineCarte(panneaubis, couleur);//on dessine dans le panneau principal la Carte avec en parametre le panneau et la couleur du joueur
                    cpt=cpt+1;//on incrémente de 1 pour passer à la ligne suivante
                    break;
                }
            }
        }
    }
    
    public void initBoules(){//initialistion des boules du tirage à 0
        for(int i=0;i<=89;i++){
            this.boules[i]=0;
        }
    }
    
    public void initJoueurs(){
        Joueur j1 = new Joueur("Jack");//création d'un joueur avec le constructeur standart
        j1.setCouleur(Color.red);//affectation d'une couleur au joueur
        
        Joueur j2 = new Joueur("Lara");//création d'un joueur avec le constructeur standart
        j2.setCouleur(Color.blue);//affectation d'une couleur au joueur
        
        lsj.add(j1);//ajout du joueur j1 dans lsj
        lsj.add(j2);//ajout du joueur j2 dans lsj
        
        for(int i=0;i<this.lsj.size();i++){//boucle pour affecter un bouton aux joueurs
                JButton bout = (JButton)PJoueur.getComponent(i);//récupération du bouton où le joueur à appuyer (où l'event à eu lieu) et nommé bout
                bout.setBackground(this.lsj.get(i).getCouleur());// ajout d'un fond pour le bouton avec la couleur récupérer sur le joueur
                bout.setText(this.lsj.get(i).getPseudo());//ajout du texte sur le bouton avec la récupération du pseudo sur le joueur j
                bout.addActionListener(new java.awt.event.ActionListener(){//ajout d'un écouteur sur le bouton bout
                public void actionPerformed(java.awt.event.ActionEvent evt){//ajout d'un event sur le bouton de type actionPerformed
                    boutonActionPerformed(evt); //appel de la méthode boutonActionPerformed lors d'une clique sur le bouton: Transfert de données
                }
            });
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JeuLoto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JeuLoto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JeuLoto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JeuLoto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {//Main pour permettre d'ajouter des paramètres lors de l'ouverture d'un élément de type "JeuLoto"
            public void run() {
                JeuLoto jeu = new JeuLoto();
                jeu.setVisible(true);
                jeu.setSize(900,450);
                jeu.setLocation(100,100);
                jeu.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AcheterCarte;
    private javax.swing.JMenu Action;
    private javax.swing.JPanel Aff1;
    private javax.swing.JPanel Aff2;
    private javax.swing.JPanel Aff2_1;
    private javax.swing.JMenu Ajout;
    private javax.swing.JMenuItem AjoutJoueur;
    private javax.swing.JButton Arreter;
    private javax.swing.JMenuItem Continuer;
    private javax.swing.JMenuItem DemarrerJeu;
    private javax.swing.JTextArea Edition;
    private javax.swing.JButton Joueur1;
    private javax.swing.JButton Joueur2;
    private javax.swing.JButton Joueur3;
    private javax.swing.JButton Joueur4;
    private javax.swing.JMenuItem Lot;
    private javax.swing.JLabel LotChoisit;
    private javax.swing.JLabel Numero;
    private javax.swing.JLabel Option;
    private javax.swing.JMenuItem Optionjeu;
    private javax.swing.JPanel PAffichage;
    private javax.swing.JPanel PCentre;
    private javax.swing.JPanel PHaut;
    private javax.swing.JPanel PJoueur;
    private javax.swing.JPanel PNumero;
    private javax.swing.JPanel PSousAffichage;
    private javax.swing.JPanel PanHistorique;
    private javax.swing.JPanel PanVisu;
    private javax.swing.JPanel Pnull;
    private javax.swing.JMenuItem Recommencer;
    private javax.swing.JButton Tirage;
    private javax.swing.JLabel Titre;
    private javax.swing.JMenuItem VisuLot;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
